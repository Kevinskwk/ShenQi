#!/usr/bin/env python3

import rospy
import actionlib
from chess_msgs.msg import \
    MovePieceAction, MovePieceGoal, MovePieceResult, MovePieceFeedback
from std_msgs.msg import Int8MultiArray

def move_piece_client():
    client = actionlib.SimpleActionClient('move_piece', MovePieceAction)
    client.wait_for_server()

    goal = MovePieceGoal()
    eaten = 1
    paths = [[(7, 8), (6, 8)],
            [(8, 8), (7, 8), (6, 7), (5, 7), (4, 7), (3, 7), (2, 7), (1, 8), (0, 8), (-1, 8)],
            [(8, 3), (8, 4), (7, 5), (6, 5), (5, 6), (6, 7), (7, 8), (8, 8)],
            [(6, 8), (7, 8)]]

    for path in paths:
        path_msg = Int8MultiArray()
        data = []
        last_delta = [0, 0]
        for i in range(1, len(path)):
            delta = [path[i][0]-path[i-1][0], path[i][1]-path[i-1][1]]
            if delta != last_delta:
                last_delta = delta
                data += path[i-1]
        data += path[-1]
        if path[-1][0] == -1:
            # position value > 10 are the side spaces for eaten pieces
            data += [-1, eaten+9, -2, eaten+9]
        path_msg.data = data
        goal.paths.append(path_msg)

    client.send_goal(goal)
    client.wait_for_result()

    return client.get_result()

if __name__ == '__main__':
    try:
        # Initializes a rospy node so that the SimpleActionClient can
        # publish and subscribe over ROS.
        rospy.init_node('test_move_piece_node')
        result = move_piece_client()
        print("Result:", result.success)
    except rospy.ROSInterruptException:
        print("program interrupted before completion", file=sys.stderr)
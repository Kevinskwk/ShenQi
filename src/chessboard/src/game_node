#!/usr/bin/env python3

'''
Node that hosts the chess game and communicates to all the periferal nodes
'''
import enum
import rospy
import actionlib
from Board import Board
# TODO: Check what message types are redundant and can be replace with std_msgs
from std_msgs.msg import String, Int8MultiArray
from chess_msgs.msg import PlayerInfo, UIin, UIout, GameCmd
from chess_msgs.srv import SendCmd, ServerInfo
from chess_msgs.msg import \
    MovePieceAction, MovePieceGoal, MovePieceResult, MovePieceFeedback, \
    QuickMatchAction, QuickMatchGoal, QuickMatchResult, QuickMatchFeedback, \
    WaitCmdAction, WaitCmdGoal, WaitCmdResult, WaitCmdFeedback, \
    WaitReadyAction, WaitReadyGoal, WaitReadyResult, WaitReadyFeedback, \
    LobbyRequestAction, LobbyRequestGoal, LobbyRequestFeedback, LobbyRequestResult, \
    RematchAction, RematchGoal, RematchFeedback, RematchResult
from credential import user_id
from Astar import Node, Astar

W = 9
H = 10

INIT_GRID = [True , True , True , True , True , True , True , True , True ,
             False, False, False, False, False, False, False, False, False,
             False, True , False, False, False, False, False, True , False,
             True , False, True , False, True , False, True , False, True ,
             False, False, False, False, False, False, False, False, False,
             False, False, False, False, False, False, False, False, False,
             True , False, True , False, True , False, True , False, True ,
             False, True , False, False, False, False, False, True , False,
             False, False, False, False, False, False, False, False, False,
             True , True , True , True , True , True , True , True , True ]


class States(enum.Enum):
    HOME = 0
    MODE_SELECT = 1
    QUICKMATCH = 2
    LOBBY_INPUT = 3
    LOBBY_WAIT = 4
    PROMPT_INVITE = 5
    ARRANGE = 6
    WAIT_ARRANGE = 7
    PLAYING = 8
    PROMPT_FORFEIT = 9
    ENDGAME = 10


class Game:

    def __init__(self, id):
        # Chessboard
        # NOTE: current player is always player 1 in the game
        self.board = Board()
        self.curr_grid = [False] * 90
        self.last_move_grid = [False] * 90
        self.illegal = False
        self.moving = False
        self.selected = None
        self.debounce = None
        self.eaten = 0
        self.astar = Astar(INIT_GRID)

        # REMOVE the following line later:
        #self.curr_grid = INIT_GRID

        # Metadata
        self.player_id = id
        self.state = States.HOME
        self.info_msg = PlayerInfo()
        self.info_msg.player_id = self.player_id
        self.lobby_input = ''
        self.opponent = ''

        # ROS publishers
        self.player_info_pub = rospy.Publisher(
            'player_info', PlayerInfo, queue_size=10)
        self.UI_output_pub = rospy.Publisher('UI_output', UIout, queue_size=10)

        # ROS subscribers
        self.sensor_sub = rospy.Subscriber(
            'sensor', Int8MultiArray, self.sensor_cb, queue_size=1)
        self.UI_input_sub = rospy.Subscriber(
            'UI_input', UIin, self.UI_input_cb, queue_size=1)
        # for testing
        self.test_cmd_sub = rospy.Subscriber(
            'test_cmd', String, self.test_cmd_cb, queue_size=1)

        # ROS service clients
        rospy.wait_for_service('send_cmd')
        self.send_cmd_client = rospy.ServiceProxy('send_cmd', SendCmd)
        rospy.wait_for_service('server_info')
        self.server_info_client = rospy.ServiceProxy('server_info', ServerInfo)

        # ROS action clients
        self.wait_cmd_client = actionlib.SimpleActionClient(
            'wait_cmd', WaitCmdAction)
        self.wait_ready_client = actionlib.SimpleActionClient(
            'wait_ready', WaitReadyAction)
        self.rematch_client = actionlib.SimpleActionClient(
            'rematch', RematchAction)
        self.move_piece_client = actionlib.SimpleActionClient(
            'move_piece', MovePieceAction)
        self.quick_match_client = actionlib.SimpleActionClient(
            'quick_match', QuickMatchAction)
        self.lobby_request_client = actionlib.SimpleActionClient(
            'lobby_request', LobbyRequestAction)

        self.UI_output_pub.publish(UIout(
            UIout.HOME, "HOME\nPress any button (1-4) to continue"))

    # Callback functions
    def sensor_cb(self, msg):
        if self.moving:
            return
        changes = dict()
        for i in range(90):
            if self.curr_grid[i] != bool(msg.data[i]):
                changes[i] = bool(msg.data[i])
        if len(changes) == 0:
            if not self.debounce is None:
                self.debounce = None
        else:
            if self.debounce == msg.data:  # not a bounce
                self.debounce = None
                self.curr_grid = list(map(bool, msg.data))
                print('changes:', changes)
                self.process_change(changes)
            else:
                self.debounce = msg.data
        #for i in range(H):
        #    print(self.curr_grid[i * W : (i+1)*W])
        #print('------------')

    # for testing
    def test_cmd_cb(self, msg):
        start = (int(msg.data[0]), int(msg.data[1]))
        end = (int(msg.data[2]), int(msg.data[3]))
        self.process_move(start, end, test=True)

    def UI_input_cb(self, msg):
        # input: 1, 2, 3, 4
        input = msg.button
        # FSM
        if self.state == States.HOME:
            self.state = States.MODE_SELECT
            self.UI_output_pub.publish(UIout(
                UIout.MODE_SELECT, "MODE SELECT\n1: Back, 2: Quickmatch, 3: Lobby"))

        elif self.state == States.MODE_SELECT:
            # Back
            if input == 3:
                self.state = States.HOME
                self.UI_output_pub.publish(UIout(
                    UIout.HOME, "HOME\nPress any button (1-4) to continue"))
            # Quickmatch
            elif input == 1:
                self.state = States.QUICKMATCH
                self.UI_output_pub.publish(UIout(
                    UIout.LOADING, "Matching Opponent..."))
                goal = QuickMatchGoal(self.player_id)
                self.quick_match_client.send_goal(
                    goal,
                    done_cb=self.quick_match_done_cb,
                    feedback_cb=self.quick_match_feedback_cb)
            # Lobby
            elif input == 2:
                self.state = States.LOBBY_INPUT
                # self.UI_output_pub.publish(UIout(
                #     UIout.LOBBY_INPUT, "LOBBY INPUT\npress 1-4 for a-d"))
                self.UI_output_pub.publish(UIout(
                    UIout.LOBBY_INPUT, ""))
                self.lobby_input = ''

        elif self.state == States.QUICKMATCH:
            # Back
            if input == 1:
                self.quick_match_client.cancel_all_goals()
                self.state = States.MODE_SELECT
                self.UI_output_pub.publish(UIout(
                    UIout.MODE_SELECT, "MODE SELECT\n1: Back, 2: Quickmatch, 3: Lobby"))

        elif self.state == States.LOBBY_INPUT:
            if len(self.lobby_input) < 4:
                if input == 1:
                    self.lobby_input += 'a'
                elif input == 2:
                    self.lobby_input += 'b'
                elif input == 3:
                    self.lobby_input += 'c'
                elif input == 4:
                    self.lobby_input += 'd'
                self.UI_output_pub.publish(UIout(
                    UIout.LOBBY_INPUT, self.lobby_input))
            if len(self.lobby_input) == 4:
                goal = LobbyRequestGoal(self.player_id, self.lobby_input)
                self.lobby_request_client.send_goal(
                    goal,
                    done_cb=self.lobby_request_done_cb,
                    feedback_cb=self.lobby_request_feedback_cb)
                self.state = States.LOBBY_WAIT
                self.UI_output_pub.publish(UIout(
                    UIout.LOADING, "Waiting for opponent {} to respond...".format(self.lobby_input)))

        elif self.state == States.LOBBY_WAIT:
            # Back
            if input == 1:
                self.lobby_request_client.cancel_all_goals()
                self.state = States.MODE_SELECT
                self.UI_output_pub.publish(UIout(
                    UIout.MODE_SELECT, "MODE SELECT\n1: Back, 2: Quickmatch, 3: Lobby"))

        elif self.state == States.PROMPT_INVITE:
            # Accept
            if input == 2:
                # TODO: accept and pair with the requester
                # Current behaviour: After one person send an invitation,
                # the other must either go to quickmatch or send invitation to the same person
                self.state = States.ARRANGE
                self.UI_output_pub.publish(UIout(
                    UIout.ARRANGE, "ARRANGE\n3: Confirm"))
            # Decline
            elif input == 3:
                self.state = States.MODE_SELECT
                self.UI_output_pub.publish(UIout(
                    UIout.MODE_SELECT, "MODE SELECT\n1: Back, 2: Quickmatch, 3: Lobby"))

        elif self.state == States.ARRANGE:
            # Confirm
            if input == 3:
                if self.check_arrangement():
                    goal = WaitReadyGoal(self.player_id, self.opponent)
                    self.wait_ready_client.send_goal(
                        goal,
                        done_cb=self.wait_ready_done_cb,
                        feedback_cb=self.wait_ready_feedback_cb)
                else:
                    self.UI_output_pub.publish(UIout(
                        UIout.ARRANGE, "Arrangement error, try again"))

        elif self.state == States.PLAYING and self.board.get_turn() == 1:
            # Forfeit
            if input == 4:
                self.state = States.PROMPT_FORFEIT
                self.UI_output_pub.publish(UIout(
                    UIout.FORFEIT, "PROMPT FORFEIT\nConfirm forfeit? 2: Yes, 3: No"))

        elif self.state == States.PROMPT_FORFEIT:
            # Yes
            if input == 1:
                self.board.forfeit(1)
                cmd_msg = GameCmd(self.player_id,
                                  self.opponent,
                                  'FFFF',
                                  self.board.get_moves())
                resp = self.send_cmd_client(cmd_msg)
                # Try again, this should not happen
                while not resp.success:
                    print("Send command failed, trying again (OOPS)")
                    resp = self.send_cmd_client(cmd_msg)

                self.state = States.ENDGAME
                self.UI_output_pub.publish(UIout(
                    UIout.LOSE, "You Forfeit!"))
                self.UI_output_pub.publish(UIout(
                    UIout.LOSE, "ENDGAME\nRematch? 1: Back, 2: Yes, 3: No"))

            # No
            elif input == 2:
                self.state = States.PLAYING
                self.UI_output_pub.publish(UIout(
                    UIout.YOUR_TURN, "PLAYING\n3: Forfeit"))

        elif self.state == States.ENDGAME:
            # Quit
            if input == 2 or input == 3:
                self.opponent = ''
                self.state = States.HOME
                self.UI_output_pub.publish(UIout(
                    UIout.HOME, "HOME\nPress any button (1-4) to continue"))
            # Rematch
            if input == 1:
                goal = RematchGoal(self.player_id, self.opponent)
                self.rematch_client.send_goal(
                    goal,
                    done_cb=self.rematch_done_cb,
                    feedback_cb=self.rematch_feedback_cb)
                self.UI_output_pub.publish(UIout(
                    UIout.LOADING, "Waiting for opponent..."))

        self.pub_state()

    # WaitCmd action
    def wait_cmd_feedback_cb(self, feedback):
        self.UI_output_pub.publish(UIout(
            UIout.OPPONENT_TURN, "Waiting for opponent to move...{}".format(feedback.wait_time)))

    def wait_cmd_done_cb(self, state, result):
        if state == 3 and result.move != 'timeout':
            # Forfeit case
            if result.move == 'FFFF':
                self.board.forfeit(2)
                self.state = States.ENDGAME
                self.UI_output_pub.publish(UIout(
                    UIout.WIN, "Opponent Forfeit, You Win!"))
                self.UI_output_pub.publish(UIout(
                    UIout.WIN, "ENDGAME\nRematch? 1: Back, 2: Yes, 3: No"))
            else:
                start = (8-int(result.move[0]), 9-int(result.move[1]))
                end = (8-int(result.move[2]), 9-int(result.move[3]))
                if not self.board.check_legal(start, end):
                    # Should not happen
                    self.UI_output_pub.publish(UIout(
                        UIout.ILLEGAL_MOVE, "RECEIVED ILLEGAL CMD"))
                    rospy.logwarn("RECEIVED ILLEGAL CMD")
                else:
                    self.board.move(start, end)
                    self.send_move_piece(start, end)
                # Check winning
                if self.board.get_winner() != -1:
                    self.state = States.ENDGAME
                    if self.board.get_winner() == 2:
                        self.UI_output_pub.publish(UIout(
                            UIout.LOSE, "You Lose!"))
                    elif self.board.get_winner() == 1:
                        self.UI_output_pub.publish(UIout(
                            UIout.WIN, "You Win!"))
                    # elif self.board.get_winner() == 0:
                    #     self.UI_output_pub.publish(UIout(
                    #         UIout.ENDGAME, "Draw!"))
                    # self.UI_output_pub.publish(UIout(
                    #     UIout.ENDGAME, "ENDGAME\nRematch? 1: Back, 2: Yes, 3: No"))
        else:
            self.state = States.HOME
            self.UI_output_pub.publish(UIout(
                UIout.HOME, "Timeout waiting for opponent"))
            # TODO: handle the timeout on the other side
            self.UI_output_pub.publish(UIout(
                UIout.HOME, "HOME\nPress any button (1-4) to continue"))

        self.pub_state()

    # WaitReady action
    def wait_ready_feedback_cb(self, feedback):
        self.UI_output_pub.publish(UIout(
            UIout.LOADING, "Waiting for opponent...{}".format(feedback.wait_time)))

    def wait_ready_done_cb(self, state, result):
        if state == 3:
            self.state = States.PLAYING
            self.UI_output_pub.publish(UIout(
                UIout.YOUR_TURN, "PLAYING\n3: Forfeit"))
            self.reset()
            if result.first:
                self.board.reset(1)
            else:
                self.board.reset(2)
                goal = WaitCmdGoal(
                    self.player_id,
                    self.opponent,
                    self.board.get_moves())
                self.wait_cmd_client.send_goal(
                    goal,
                    done_cb=self.wait_cmd_done_cb,
                    feedback_cb=self.wait_cmd_feedback_cb)
            self.board.print_board()
            self.board.log_info()
        else:
            self.state = States.HOME
            self.UI_output_pub.publish(UIout(
                UIout.HOME, "Timeout waiting for opponent"))
            # TODO: handle the timeout on the other side
            self.UI_output_pub.publish(UIout(
                UIout.HOME, "HOME\nPress any button (1-4) to continue"))

        self.pub_state()

    # Rematch action
    def rematch_feedback_cb(self, feedback):
        self.UI_output_pub.publish(UIout(
            UIout.LOADING, "Waiting for opponent...{}".format(feedback.wait_time)))

    def rematch_done_cb(self, state, result):
        if state == 3:
            self.state = States.ARRANGE
            self.UI_output_pub.publish(UIout(
                UIout.ARRANGE, "ARRANGE\n3: Confirm"))
        else:
            self.UI_output_pub.publish(UIout(
                UIout.HOME, "Opponent refused rematch"))
            self.state = States.HOME
            # TODO: handle the timeout on the other side
            self.UI_output_pub.publish(UIout(
                UIout.HOME, "HOME\nPress any button (1-4) to continue"))

        self.pub_state()

    # MovePiece action
    def move_piece_feedback_cb(self, feedback):
        # self.UI_output_pub.publish(UIout(
        #     UIout.PLAYING, "Current move: {}".format(feedback.current_move)))
        print("Current move: {}".format(feedback.current_move))

    def move_piece_done_cb(self, state, result):
        self.last_move_grid = self.curr_grid
        self.moving = False
        self.selected = None
        self.UI_output_pub.publish(UIout(
            UIout.YOUR_TURN, "PLAYING\n3: Forfeit"))

    # QuickMatch action
    def quick_match_feedback_cb(self, feedback):
        self.UI_output_pub.publish(UIout(
            UIout.LOADING, "Matching opponent...{}".format(feedback.wait_time)))

    def quick_match_done_cb(self, state, result):
        if state == 3 and result.opponent != 'timeout':
            self.opponent = result.opponent
            self.UI_output_pub.publish(UIout(
                UIout.ARRANGE, "Matched with: {}".format(self.opponent)))
            self.state = States.ARRANGE
            self.UI_output_pub.publish(UIout(
                UIout.ARRANGE, "ARRANGE\n3: Confirm"))
        else:
            self.UI_output_pub.publish(UIout(
                UIout.MODE_SELECT, "Failed to find an opponent"))
            self.state = States.MODE_SELECT
            self.UI_output_pub.publish(UIout(
                UIout.MODE_SELECT, "MODE SELECT\n1: Back, 2: Quickmatch, 3: Lobby"))

        self.pub_state()

    # LobbyRequest action
    def lobby_request_feedback_cb(self, feedback):
        self.UI_output_pub.publish(UIout(
            UIout.LOADING, "Waiting for opponent to respond...{}".format(feedback.wait_time)))

    def lobby_request_done_cb(self, state, result):
        if state == 3 and result.success:
            self.opponent = self.lobby_input
            self.UI_output_pub.publish(UIout(
                UIout.ARRANGE, "Matched with: {}".format(self.opponent)))
            self.state = States.ARRANGE
            self.UI_output_pub.publish(UIout(
                UIout.ARRANGE, "ARRANGE\n3: Confirm"))
        else:
            self.UI_output_pub.publish(UIout(
                UIout.MODE_SELECT, "Failed to find user [{}]".format(self.lobby_input)))
            self.UI_output_pub.publish(UIout(
                UIout.MODE_SELECT, str(result.msg)))
            self.state = States.MODE_SELECT
            self.UI_output_pub.publish(UIout(
                UIout.MODE_SELECT, "MODE SELECT\n1: Back, 2: Quickmatch, 3: Lobby"))

        self.pub_state()

    # Other functions
    def reset(self):
        self.last_move_grid = INIT_GRID
        self.illegal = False
        self.moving = False
        self.selected = None
        self.debounce = None
        self.eaten = 0

    def pub_state(self):
        self.info_msg.mode = self.state.value
        self.player_info_pub.publish(self.info_msg)

    def send_move_piece(self, start, end):
        self.moving = True
        # check if eating (piece on end)
        if self.last_move_grid[end[1]*W + end[0]]:
            print("eating")
            self.eaten += 1
        paths = self.astar.find_path(self.last_move_grid.copy(), start, end)
        print("paths: {}".format(paths))
        goal = MovePieceGoal()

        # post processing of the paths
        for path in paths:
            path_msg = Int8MultiArray()
            data = []
            last_delta = [0, 0]
            for i in range(1, len(path)):
                delta = [path[i][0]-path[i-1][0], path[i][1]-path[i-1][1]]
                if delta != last_delta:
                    last_delta = delta
                    data += path[i-1]
            data += path[-1]
            if path[-1][0] == -1:
                # position value > 10 are the side spaces for eaten pieces
                data += [-1, self.eaten+9, -2, self.eaten+9]
            path_msg.data = data
            goal.paths.append(path_msg)

        self.move_piece_client.send_goal(
            goal,
            done_cb=self.move_piece_done_cb,
            feedback_cb=self.move_piece_feedback_cb)

        self.curr_grid[end[1]*W + end[0]] = True
        self.curr_grid[start[1]*W + start[0]] = False
        self.last_move_grid[end[1]*W + end[0]] = True
        self.last_move_grid[start[1]*W + start[0]] = False

    def process_change(self, changes):
        # recovery from illegal move
        if self.illegal:
            if self.curr_grid == self.last_move_grid:
                self.illegal = False
                print("recovered")
                self.selected = None
                if self.board.get_turn() == 1:
                    self.UI_output_pub.publish(UIout(
                        UIout.YOUR_TURN, "PLAYING\n3: Forfeit"))
                else:
                    self.UI_output_pub.publish(UIout(
                        UIout.OPPONENT_TURN, "Waiting for opponent to move...{}".format(feedback.wait_time)))
            return

        # ignore during auto moving and not during PLAYING or PROMPT_FORFEIT
        if self.moving or \
            (self.state != States.PLAYING and
             self.state != States.PROMPT_FORFEIT):
            return

        # auto cancel forfeit if player tries to move
        if self.state == States.PROMPT_FORFEIT:
            self.state = States.PLAYING
            self.UI_output_pub.publish(UIout(
                UIout.YOUR_TURN, "PLAYING\n3: Forfeit"))

        if self.board.get_turn() != 1:
            self.illegal = True
            self.UI_output_pub.publish(UIout(
                UIout.ILLEGAL_MOVE, "Illegal Move! Please return the piece!"))
        else:
            # get only one change (multiple also not expected)
            if len(changes) != 1:
                rospy.logwarn("more than one change at a time!")
            key = next(iter(changes))

            # taking up a piece
            if (self.selected is None) and not changes[key]:
                self.selected = key
                print("selected:", self.selected)

            # putting down a piece
            elif (self.selected is not None) and changes[key]:
                start = (self.selected % W, self.selected // W)
                end = (key % W, key // W)
                self.process_move(start, end)
                print("start, end:", start, end)
        self.pub_state()

    def process_move(self, start, end, test=False):
        if not self.board.check_legal(start, end):
            if not test:
                self.illegal = True
            self.UI_output_pub.publish(UIout(
                UIout.ILLEGAL_MOVE, "Illegal Move! Please return the piece!"))
        else:
            self.last_move_grid = self.curr_grid
            self.board.move(start, end)
            cmd = str(start[0]) + str(start[1]) + \
                str(end[0]) + str(end[1])
            cmd_msg = GameCmd(self.player_id,
                              self.opponent,
                              cmd,
                              self.board.get_moves() - 1)
            resp = self.send_cmd_client(cmd_msg)
            # Try again, should not happen
            while not resp.success:
                print("Send command failed, trying again (OOPS)")
                resp = self.send_cmd_client(cmd_msg)
            # Check winning
            if self.board.get_winner() == -1:
                goal = WaitCmdGoal(
                    self.player_id,
                    self.opponent,
                    self.board.get_moves())
                self.wait_cmd_client.send_goal(
                    goal,
                    done_cb=self.wait_cmd_done_cb,
                    feedback_cb=self.wait_cmd_feedback_cb)
            else:
                self.state = States.ENDGAME
                if self.board.get_winner() == 2:
                    self.UI_output_pub.publish(UIout(
                        UIout.LOSE, "You Lose!"))
                elif self.board.get_winner() == 1:
                    self.UI_output_pub.publish(UIout(
                        UIout.WIN, "You Win!"))
                # elif self.board.get_winner() == 0:
                #     self.UI_output_pub.publish(UIout(
                #         UIout.ENDGAME, "Draw!"))
                # self.UI_output_pub.publish(UIout(
                #     UIout.ENDGAME, "ENDGAME\nRematch? 1: Back, 2: Yes, 3: No"))
        self.pub_state()

    def check_arrangement(self):
        if self.curr_grid == INIT_GRID:
            self.last_move_grid = INIT_GRID
            return True
        else:
            return False


rospy.init_node('game_node', anonymous=True)
game = Game(user_id)
rospy.spin()

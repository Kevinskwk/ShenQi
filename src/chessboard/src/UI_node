#!/usr/bin/env python3

"""
Node that displays the UI using Pygame, processes UI input (keyboard, buttons)
"""

import rospy
import pygame
import time
from chess_msgs.msg import UIin, UIout
import os

try:
    os.chdir(os.path.dirname(__file__))
except:
    pass

try:
    import RPi.GPIO as GPIO
    RPI = True
except:
    RPI = False

# pygame set up
pygame.init()
infoObject = pygame.display.Info()
display_size = (infoObject.current_w, infoObject.current_h)

gameDisplay = pygame.display.set_mode(display_size, pygame.NOFRAME)
pygame.display.set_caption("ShenQi")

clock = pygame.time.Clock()
crashed = False

image_list = ["home.png", "mode_select.png", "lobby_input.png", "loading.png",
    "match_found.png", "invite.png", "arrange.png", "your_turn.png",
    "opponent_turn.png", "forfeit.png", "illegal_move.png", "win.png", "lose.png"]
images = [pygame.transform.scale(pygame.image.load('assets/' + image), display_size) for image in image_list]
curr_screen = 0

pygame.font.init()
font = pygame.font.Font('freesansbold.ttf', 64)

gameDisplay.fill((255, 255, 255))
gameDisplay.blit(images[0], (0, 0))
pygame.display.update()

# generate text
def get_text(string, colour=(0, 0, 0)):
    return font.render(string, 1, colour)

# callback functions
def button_cb(channel):
    if channel == 18:
        return
    time.sleep(0.1)
    if GPIO.input(channel):
        button_id = buttons.index(channel) + 1
        msg = UIin(button_id)
        UI_input_pub.publish(msg)

def UI_output_cb(msg):
    gameDisplay.fill((255, 255, 255))
    gameDisplay.blit(images[msg.screen], (0,0))
    if msg.screen in [2, 3, 4]:
        text = get_text(msg.data)
        gameDisplay.blit(text, ((display_size[0]-text.get_width())/2, display_size[1]*2/3))
    print(msg.data + '\n')

# ros stuff
rospy.init_node('UI_node', anonymous = True)

UI_input_pub = rospy.Publisher('UI_input', UIin, queue_size=10)
UI_output_sub = rospy.Subscriber('UI_output', UIout, UI_output_cb, queue_size=10)

# set up buttons and callbacks
buttons = (14, 15, 17, 18)
if RPI:
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    for i in buttons:
        GPIO.setup(i, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.add_event_detect(
            i, GPIO.RISING, callback=button_cb, bouncetime=200)

# main loop
while not crashed:
    # If pygame crashes, quit
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            crashed = True
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1:
                msg = UIin(1)
                UI_input_pub.publish(msg)
            
            elif event.key == pygame.K_2:
                msg = UIin(2)
                UI_input_pub.publish(msg)

            elif event.key == pygame.K_3:
                msg = UIin(3)
                UI_input_pub.publish(msg)

            elif event.key == pygame.K_4:
                msg = UIin(4)
                UI_input_pub.publish(msg)

            elif event.key == pygame.K_ESCAPE or event.key == pygame.K_q:
                if gameDisplay.get_flags() & pygame.NOFRAME:
                    pygame.display.set_mode(display_size)
                else:
                    pygame.display.set_mode(display_size, pygame.NOFRAME)

    pygame.display.update()
    clock.tick(60)

pygame.quit()
quit()

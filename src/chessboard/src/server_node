#!/usr/bin/env python3

'''
Node that connects to Firebase and hosts multiple service/action servers
'''

import rospy
import actionlib
from chess_msgs.msg import PlayerInfo
from chess_msgs.msg import \
    QuickMatchAction, QuickMatchFeedback, QuickMatchResult, \
    WaitCmdAction, WaitCmdFeedback, WaitCmdResult, \
    WaitReadyAction, WaitReadyFeedback, WaitReadyResult, \
    LobbyRequestAction, LobbyRequestFeedback, LobbyRequestResult, \
    RematchAction, RematchFeedback, RematchResult
from chess_msgs.srv import SendCmd, SendCmdResponse, \
    ServerInfo, ServerInfoResponse

import pyrebase
from credential import config

# Firebase stuff
firebase = pyrebase.initialize_app(config)
db = firebase.database()

# helper function
def reset_game(player1, player2):
    game_id = min(player1, player2) + max(player1, player2)
    db.child('games').child(game_id).child('ready').set({})
    db.child('games').child(game_id).child('rematch').set({})
    db.child('games').child(game_id).child('moves').set({})

# ROS action servers

class QuickMatchServer(object):
    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            self._action_name,
            QuickMatchAction,
            execute_cb=self.execute_cb,
            auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        rate = rospy.Rate(1)
        max_time = 600
        i = 0

        while i < max_time:
            users = db.child('users').get()
            for user in users.each():
                if user.key() == goal.requester:
                    request = user.val().get('request')
                    if not (request is None or request == ''):
                        # someone matching me
                        db.child('users').child(request).update(
                            {'request': goal.requester})
                        self._as.set_succeeded(QuickMatchResult(request))
                        reset_game(goal.requester, request)
                        return

                elif user.val().get('state') == 2 and \
                        (user.val().get('request') is None or user.val().get('request') == ''):
                    # Find someone looking for a match
                    db.child('users').child(goal.requester).update(
                        {'request': user.key()})
                    db.child('users').child(user.key()).update(
                        {'request': goal.requester})
                    self._as.set_succeeded(QuickMatchResult(user.key()))
                    reset_game(goal.requester, user.key())
                    return

            self._as.publish_feedback(QuickMatchFeedback(i))
            i += 1
            rate.sleep()

        self._as.set_aborted(QuickMatchResult('timeout'))


class LobbyRequestServer(object):
    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            self._action_name,
            LobbyRequestAction,
            execute_cb=self.execute_cb,
            auto_start=False)
        self._as.register_preempt_callback(self.preempt_cb)
        self._as.start()
        self.goal_opponent = ''

    def execute_cb(self, goal):
        rate = rospy.Rate(1)
        max_time = 300
        i = 0
        self.goal_opponent = goal.opponent

        while i < max_time:
            opponent = db.child('users').child(goal.opponent).get()
            if opponent.val() is None:
                self._as.set_aborted(LobbyRequestResult(False, 'User not exist'))
                return

            state = opponent.val().get('state')
            request = opponent.val().get('request')
            if state is not None and (state >= 1 and state <= 5) and \
               (request is None or request == '' or request == goal.requester):
                db.child('users').child(goal.opponent).update(
                    {'request': goal.requester})
            else:
                self._as.set_aborted(LobbyRequestResult(False, 'User now busy'))
                return

            # check if self is being match by the desired opponent:
            me = db.child('users').child(goal.requester).child('request').get()
            if me.val() is not None and me.val() == goal.opponent: # matched
                self._as.set_succeeded(LobbyRequestResult(True, ''))
                reset_game(goal.requester, goal.opponent)
                return

            self._as.publish_feedback(QuickMatchFeedback(i))
            i += 1
            rate.sleep()

        self._as.set_aborted(LobbyRequestResult(False, 'timeout'))

    def preempt_cb(self):
        db.child('users').child(self.opponent).update({'request': ''})
        self._as.set_preempted()


class WaitCmdServer(object):
    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            self._action_name,
            WaitCmdAction,
            execute_cb=self.execute_cb,
            auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        rate = rospy.Rate(1)
        game_id = min(goal.sender, goal.target) + max(goal.sender, goal.target)
        max_time = 600
        i = 0

        while i < max_time:
            moves = db.child('games').child(game_id).child('moves').get().val()
            if moves is None or len(moves) < goal.step + 1:
                self._as.publish_feedback(WaitCmdFeedback(i))
            else:
                self._as.set_succeeded(WaitCmdResult(moves[goal.step]))
                return
            i += 1
            rate.sleep()

        self._as.set_aborted(WaitCmdResult('timeout'))


class WaitReadyServer(object):
    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            self._action_name,
            WaitReadyAction,
            execute_cb=self.execute_cb,
            auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        rate = rospy.Rate(1)
        game_id = min(goal.sender, goal.target) + max(goal.sender, goal.target)
        max_time = 300
        i = 0
        # The player ready first will be playing first
        ready = db.child('games').child(game_id).child('ready').get().val()
        # opponent not ready yet
        if ready is None or len(ready) < 1:
            db.child('games').child(game_id).child(
                'ready').set({0: goal.sender})
            # wait for opponent
            max_time = 600
            i = 0
            while i < max_time:
                ready = db.child('games').child(
                    game_id).child('ready').get().val()
                if len(ready) < 2:
                    self._as.publish_feedback(WaitReadyFeedback(i))
                else:  # Opponent ready
                    self._as.set_succeeded(WaitReadyResult(True))
                    db.child('games').child(game_id).child('ready').remove()
                    return
                i += 1
                rate.sleep()
            # time out
            self._as.set_aborted(WaitReadyResult(False))
            db.child('games').child(game_id).child('ready').remove()
            return
        # Opponent ready already
        else:
            db.child('games').child(game_id).child(
                'ready').update({1: goal.sender})
            self._as.set_succeeded(WaitReadyResult(False))

class RematchServer(object):
    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(
            self._action_name,
            RematchAction,
            execute_cb=self.execute_cb,
            auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        rate = rospy.Rate(1)
        game_id = min(goal.sender, goal.target) + max(goal.sender, goal.target)
        max_time = 300
        i = 0
        db.child('games').child(game_id).child('rematch').update({goal.sender: True})

        while i < max_time:
            # opponent refuse
            if db.child('users').child(goal.target).child('state').get().val() != 10:
                break

            rematch = db.child('games').child(game_id).child('rematch').get().val()
            # opponent accept
            if rematch is not None and len(rematch) == 2:
                self._as.set_succeeded(RematchResult(True))
            else:
                self._as.publish_feedback(RematchFeedback(i))
            i += 1
            rate.sleep()

        self._as.set_aborted(RematchResult(False))
        db.child('games').child(game_id).child('rematch').remove()

# callback functions
def player_cb(msg):
    db.child('users').child(msg.player_id).update({'state': msg.mode})
    if msg.mode >= 10:  # game over. clear matching info
        db.child('users').child(msg.player_id).update({'request': ''})

# service handling functions
def handle_send_cmd(req):
    # assert validity of cmd
    if not req.cmd.move.isdecimal or len(req.cmd.move) != 4:
        return SendCmdResponse(False)

    game_id = min(req.cmd.sender, req.cmd.target) + \
        max(req.cmd.sender, req.cmd.target)
    if req.cmd.step == 0:
        db.child('games').child(game_id).child('moves').set({0: req.cmd.move})
    else:
        if len(db.child('games').child(game_id).child('moves').get().val()) != req.cmd.step:
            # skipped move
            return SendCmdResponse(False)

        db.child('games').child(game_id).child(
            'moves').update({req.cmd.step: req.cmd.move})
        return SendCmdResponse(True)

def handle_server_info(req):
    pass

# ROS subscriber
player_sub = rospy.Subscriber(
    'player_info', PlayerInfo, player_cb, queue_size=1)

# ROS service
send_cmd_srv = rospy.Service('send_cmd', SendCmd, handle_send_cmd)
server_info_srv = rospy.Service('server_info', ServerInfo, handle_server_info)

rospy.init_node('server_node', anonymous=False)
quick_match_server = QuickMatchServer('quick_match')
wait_cmd_server = WaitCmdServer('wait_cmd')
wait_ready_server = WaitReadyServer('wait_ready')
rematch_server = RematchServer('rematch')
lobby_request_server = LobbyRequestServer('lobby_request')

rospy.spin()
